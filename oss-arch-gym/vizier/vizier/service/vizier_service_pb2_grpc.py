# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.longrunning import operations_pb2 as google_dot_longrunning_dot_operations__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import study_pb2 as study__pb2
import vizier_service_pb2 as vizier__service__pb2


class VizierServiceStub(object):
    """An Open-Source port of the Vizier API, based on Cloud AI Platform Vizier API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateStudy = channel.unary_unary(
                '/vizier.VizierService/CreateStudy',
                request_serializer=vizier__service__pb2.CreateStudyRequest.SerializeToString,
                response_deserializer=study__pb2.Study.FromString,
                )
        self.GetStudy = channel.unary_unary(
                '/vizier.VizierService/GetStudy',
                request_serializer=vizier__service__pb2.GetStudyRequest.SerializeToString,
                response_deserializer=study__pb2.Study.FromString,
                )
        self.ListStudies = channel.unary_unary(
                '/vizier.VizierService/ListStudies',
                request_serializer=vizier__service__pb2.ListStudiesRequest.SerializeToString,
                response_deserializer=vizier__service__pb2.ListStudiesResponse.FromString,
                )
        self.DeleteStudy = channel.unary_unary(
                '/vizier.VizierService/DeleteStudy',
                request_serializer=vizier__service__pb2.DeleteStudyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SuggestTrials = channel.unary_unary(
                '/vizier.VizierService/SuggestTrials',
                request_serializer=vizier__service__pb2.SuggestTrialsRequest.SerializeToString,
                response_deserializer=google_dot_longrunning_dot_operations__pb2.Operation.FromString,
                )
        self.GetOperation = channel.unary_unary(
                '/vizier.VizierService/GetOperation',
                request_serializer=google_dot_longrunning_dot_operations__pb2.GetOperationRequest.SerializeToString,
                response_deserializer=google_dot_longrunning_dot_operations__pb2.Operation.FromString,
                )
        self.CreateTrial = channel.unary_unary(
                '/vizier.VizierService/CreateTrial',
                request_serializer=vizier__service__pb2.CreateTrialRequest.SerializeToString,
                response_deserializer=study__pb2.Trial.FromString,
                )
        self.GetTrial = channel.unary_unary(
                '/vizier.VizierService/GetTrial',
                request_serializer=vizier__service__pb2.GetTrialRequest.SerializeToString,
                response_deserializer=study__pb2.Trial.FromString,
                )
        self.ListTrials = channel.unary_unary(
                '/vizier.VizierService/ListTrials',
                request_serializer=vizier__service__pb2.ListTrialsRequest.SerializeToString,
                response_deserializer=vizier__service__pb2.ListTrialsResponse.FromString,
                )
        self.AddTrialMeasurement = channel.unary_unary(
                '/vizier.VizierService/AddTrialMeasurement',
                request_serializer=vizier__service__pb2.AddTrialMeasurementRequest.SerializeToString,
                response_deserializer=study__pb2.Trial.FromString,
                )
        self.CompleteTrial = channel.unary_unary(
                '/vizier.VizierService/CompleteTrial',
                request_serializer=vizier__service__pb2.CompleteTrialRequest.SerializeToString,
                response_deserializer=study__pb2.Trial.FromString,
                )
        self.DeleteTrial = channel.unary_unary(
                '/vizier.VizierService/DeleteTrial',
                request_serializer=vizier__service__pb2.DeleteTrialRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CheckTrialEarlyStoppingState = channel.unary_unary(
                '/vizier.VizierService/CheckTrialEarlyStoppingState',
                request_serializer=vizier__service__pb2.CheckTrialEarlyStoppingStateRequest.SerializeToString,
                response_deserializer=vizier__service__pb2.CheckTrialEarlyStoppingStateResponse.FromString,
                )
        self.StopTrial = channel.unary_unary(
                '/vizier.VizierService/StopTrial',
                request_serializer=vizier__service__pb2.StopTrialRequest.SerializeToString,
                response_deserializer=study__pb2.Trial.FromString,
                )
        self.ListOptimalTrials = channel.unary_unary(
                '/vizier.VizierService/ListOptimalTrials',
                request_serializer=vizier__service__pb2.ListOptimalTrialsRequest.SerializeToString,
                response_deserializer=vizier__service__pb2.ListOptimalTrialsResponse.FromString,
                )
        self.UpdateMetadata = channel.unary_unary(
                '/vizier.VizierService/UpdateMetadata',
                request_serializer=vizier__service__pb2.UpdateMetadataRequest.SerializeToString,
                response_deserializer=vizier__service__pb2.UpdateMetadataResponse.FromString,
                )


class VizierServiceServicer(object):
    """An Open-Source port of the Vizier API, based on Cloud AI Platform Vizier API.
    """

    def CreateStudy(self, request, context):
        """Creates a Study. A resource name will be generated after creation of the
        Study.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStudy(self, request, context):
        """Gets a Study by name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStudies(self, request, context):
        """Lists all the studies in a region for an associated project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteStudy(self, request, context):
        """Deletes a Study.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SuggestTrials(self, request, context):
        """Adds one or more Trials to a Study, with parameter values
        suggested by a Pythia policy. Returns a long-running
        operation associated with the generation of Trial suggestions.
        When this long-running operation succeeds, it will contain
        a [SuggestTrialsResponse].
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOperation(self, request, context):
        """Gets the latest state of a long-running operation.  Clients can use this
        method to poll the operation result at intervals as recommended by the API
        service. Copied from google.longrunning.operations.proto.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTrial(self, request, context):
        """Adds a user provided Trial to a Study.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrial(self, request, context):
        """Gets a Trial.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTrials(self, request, context):
        """Lists the Trials associated with a Study.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTrialMeasurement(self, request, context):
        """Adds a measurement of the objective metrics to a Trial. This measurement
        is assumed to have been taken before the Trial is complete.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteTrial(self, request, context):
        """Marks a Trial as complete.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTrial(self, request, context):
        """Deletes a Trial.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckTrialEarlyStoppingState(self, request, context):
        """Checks  whether a Trial should stop or not. Returns a
        long-running operation. When the operation is successful,
        it will contain a
        [CheckTrialEarlyStoppingStateResponse].
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopTrial(self, request, context):
        """Stops a Trial.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOptimalTrials(self, request, context):
        """Lists the pareto-optimal Trials for multi-objective Study or the
        optimal Trials for single-objective Study. The definition of
        pareto-optimal can be checked in wiki page.
        https://en.wikipedia.org/wiki/Pareto_efficiency
        (-- api-linter: core::0136::http-uri-suffix=disabled
        aip.dev/not-precedent: disabling the lint for custom api. --)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMetadata(self, request, context):
        """An atomic, bulk update of Study and Trial metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VizierServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateStudy': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateStudy,
                    request_deserializer=vizier__service__pb2.CreateStudyRequest.FromString,
                    response_serializer=study__pb2.Study.SerializeToString,
            ),
            'GetStudy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStudy,
                    request_deserializer=vizier__service__pb2.GetStudyRequest.FromString,
                    response_serializer=study__pb2.Study.SerializeToString,
            ),
            'ListStudies': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStudies,
                    request_deserializer=vizier__service__pb2.ListStudiesRequest.FromString,
                    response_serializer=vizier__service__pb2.ListStudiesResponse.SerializeToString,
            ),
            'DeleteStudy': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteStudy,
                    request_deserializer=vizier__service__pb2.DeleteStudyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SuggestTrials': grpc.unary_unary_rpc_method_handler(
                    servicer.SuggestTrials,
                    request_deserializer=vizier__service__pb2.SuggestTrialsRequest.FromString,
                    response_serializer=google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
            ),
            'GetOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOperation,
                    request_deserializer=google_dot_longrunning_dot_operations__pb2.GetOperationRequest.FromString,
                    response_serializer=google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
            ),
            'CreateTrial': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTrial,
                    request_deserializer=vizier__service__pb2.CreateTrialRequest.FromString,
                    response_serializer=study__pb2.Trial.SerializeToString,
            ),
            'GetTrial': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrial,
                    request_deserializer=vizier__service__pb2.GetTrialRequest.FromString,
                    response_serializer=study__pb2.Trial.SerializeToString,
            ),
            'ListTrials': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTrials,
                    request_deserializer=vizier__service__pb2.ListTrialsRequest.FromString,
                    response_serializer=vizier__service__pb2.ListTrialsResponse.SerializeToString,
            ),
            'AddTrialMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTrialMeasurement,
                    request_deserializer=vizier__service__pb2.AddTrialMeasurementRequest.FromString,
                    response_serializer=study__pb2.Trial.SerializeToString,
            ),
            'CompleteTrial': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteTrial,
                    request_deserializer=vizier__service__pb2.CompleteTrialRequest.FromString,
                    response_serializer=study__pb2.Trial.SerializeToString,
            ),
            'DeleteTrial': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTrial,
                    request_deserializer=vizier__service__pb2.DeleteTrialRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CheckTrialEarlyStoppingState': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckTrialEarlyStoppingState,
                    request_deserializer=vizier__service__pb2.CheckTrialEarlyStoppingStateRequest.FromString,
                    response_serializer=vizier__service__pb2.CheckTrialEarlyStoppingStateResponse.SerializeToString,
            ),
            'StopTrial': grpc.unary_unary_rpc_method_handler(
                    servicer.StopTrial,
                    request_deserializer=vizier__service__pb2.StopTrialRequest.FromString,
                    response_serializer=study__pb2.Trial.SerializeToString,
            ),
            'ListOptimalTrials': grpc.unary_unary_rpc_method_handler(
                    servicer.ListOptimalTrials,
                    request_deserializer=vizier__service__pb2.ListOptimalTrialsRequest.FromString,
                    response_serializer=vizier__service__pb2.ListOptimalTrialsResponse.SerializeToString,
            ),
            'UpdateMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMetadata,
                    request_deserializer=vizier__service__pb2.UpdateMetadataRequest.FromString,
                    response_serializer=vizier__service__pb2.UpdateMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vizier.VizierService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VizierService(object):
    """An Open-Source port of the Vizier API, based on Cloud AI Platform Vizier API.
    """

    @staticmethod
    def CreateStudy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/CreateStudy',
            vizier__service__pb2.CreateStudyRequest.SerializeToString,
            study__pb2.Study.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStudy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/GetStudy',
            vizier__service__pb2.GetStudyRequest.SerializeToString,
            study__pb2.Study.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStudies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/ListStudies',
            vizier__service__pb2.ListStudiesRequest.SerializeToString,
            vizier__service__pb2.ListStudiesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteStudy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/DeleteStudy',
            vizier__service__pb2.DeleteStudyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SuggestTrials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/SuggestTrials',
            vizier__service__pb2.SuggestTrialsRequest.SerializeToString,
            google_dot_longrunning_dot_operations__pb2.Operation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/GetOperation',
            google_dot_longrunning_dot_operations__pb2.GetOperationRequest.SerializeToString,
            google_dot_longrunning_dot_operations__pb2.Operation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTrial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/CreateTrial',
            vizier__service__pb2.CreateTrialRequest.SerializeToString,
            study__pb2.Trial.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTrial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/GetTrial',
            vizier__service__pb2.GetTrialRequest.SerializeToString,
            study__pb2.Trial.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTrials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/ListTrials',
            vizier__service__pb2.ListTrialsRequest.SerializeToString,
            vizier__service__pb2.ListTrialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTrialMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/AddTrialMeasurement',
            vizier__service__pb2.AddTrialMeasurementRequest.SerializeToString,
            study__pb2.Trial.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteTrial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/CompleteTrial',
            vizier__service__pb2.CompleteTrialRequest.SerializeToString,
            study__pb2.Trial.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTrial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/DeleteTrial',
            vizier__service__pb2.DeleteTrialRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckTrialEarlyStoppingState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/CheckTrialEarlyStoppingState',
            vizier__service__pb2.CheckTrialEarlyStoppingStateRequest.SerializeToString,
            vizier__service__pb2.CheckTrialEarlyStoppingStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopTrial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/StopTrial',
            vizier__service__pb2.StopTrialRequest.SerializeToString,
            study__pb2.Trial.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListOptimalTrials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/ListOptimalTrials',
            vizier__service__pb2.ListOptimalTrialsRequest.SerializeToString,
            vizier__service__pb2.ListOptimalTrialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vizier.VizierService/UpdateMetadata',
            vizier__service__pb2.UpdateMetadataRequest.SerializeToString,
            vizier__service__pb2.UpdateMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
